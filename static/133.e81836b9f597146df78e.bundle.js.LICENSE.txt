/* .LeafletProvider */

/* .createContainerComponent */

/* .createControlHook */

/* .createDivOverlayComponent */

/* .createDivOverlayHook */

/* .createElementHook */

/* .createElementObject */

/* .createLayerComponent */

/* .createLayerHook */

/* .createLeafComponent */

/* .createLeafletContext */

/* .createOverlayComponent */

/* .createPathHook */

/* .createTileLayerComponent */

/* .extendContext */

/* .updateGridLayer */

/* .useAttribution */

/* .useEventHandlers */

/* .useLayerLifecycle */

/* .useLeafletContext */

/* .withPane */

/* @__PURE__ */

/* @method eachLayer(fn: Function, context?: Object): this
     * Iterates over the layers of the map, optionally specifying context of the iterator function.
     * ```
     * map.eachLayer(function(layer){
     *     layer.bindPopup('Hello');
     * });
     * ```
     */

/* @method off(type: String, fn?: Function, context?: Object): this
     * Removes a previously added listener function. If no function is specified, it will remove all the listeners of that particular event from the object. Note that if you passed a custom context to `on`, you must pass the same context to `off` in order to remove the listener.
     *
     * @alternative
     * @method off(eventMap: Object): this
     * Removes a set of type/listener pairs.
     *
     * @alternative
     * @method off: this
     * Removes all listeners to all events on the object. This includes implicitly attached events.
     */

/* @method on(type: String, fn: Function, context?: Object): this
     * Adds a listener function (`fn`) to a particular event type of the object. You can optionally specify the context of the listener (object the this keyword will point to). You can also pass several space-separated types (e.g. `'click dblclick'`).
     *
     * @alternative
     * @method on(eventMap: Object): this
     * Adds a set of type/listener pairs, e.g. `{click: onClick, mousemove: onMouseMove}`
     */

/* @preserve
 * Leaflet 1.9.3, a JS library for interactive maps. https://leafletjs.com
 * (c) 2010-2022 Vladimir Agafonkin, (c) 2010-2011 CloudMade
 */

/* @section
     *
     * In addition to [shared layer methods](#Layer) like `addTo()` and `remove()` and [popup methods](#Popup) like bindPopup() you can also use the following methods:
     */

/* @section
     * @aka GeoJSON options
     *
     * @option pointToLayer: Function = *
     * A `Function` defining how GeoJSON points spawn Leaflet layers. It is internally
     * called when data is added, passing the GeoJSON point feature and its `LatLng`.
     * The default is to spawn a default `Marker`:
     * ```js
     * function(geoJsonPoint, latlng) {
     * 	return L.marker(latlng);
     * }
     * ```
     *
     * @option style: Function = *
     * A `Function` defining the `Path options` for styling GeoJSON lines and polygons,
     * called internally when data is added.
     * The default value is to not override any defaults:
     * ```js
     * function (geoJsonFeature) {
     * 	return {}
     * }
     * ```
     *
     * @option onEachFeature: Function = *
     * A `Function` that will be called once for each created `Feature`, after it has
     * been created and styled. Useful for attaching events and popups to features.
     * The default is to do nothing with the newly created layers:
     * ```js
     * function (feature, layer) {}
     * ```
     *
     * @option filter: Function = *
     * A `Function` that will be used to decide whether to include a feature or not.
     * The default is to include all features:
     * ```js
     * function (geoJsonFeature) {
     * 	return true;
     * }
     * ```
     * Note: dynamically changing the `filter` option will have effect only on newly
     * added data. It will _not_ re-evaluate already included features.
     *
     * @option coordsToLatLng: Function = *
     * A `Function` that will be used for converting GeoJSON coordinates to `LatLng`s.
     * The default is the `coordsToLatLng` static method.
     *
     * @option markersInheritOptions: Boolean = false
     * Whether default Markers for "Point" type Features inherit from group options.
     */

/* @section
     * @aka Icon options
     *
     * @option iconUrl: String = null
     * **(required)** The URL to the icon image (absolute or relative to your script path).
     *
     * @option iconRetinaUrl: String = null
     * The URL to a retina sized version of the icon image (absolute or relative to your
     * script path). Used for Retina screen devices.
     *
     * @option iconSize: Point = null
     * Size of the icon image in pixels.
     *
     * @option iconAnchor: Point = null
     * The coordinates of the "tip" of the icon (relative to its top left corner). The icon
     * will be aligned so that this point is at the marker's geographical location. Centered
     * by default if size is specified, also can be set in CSS with negative margins.
     *
     * @option popupAnchor: Point = [0, 0]
     * The coordinates of the point from which popups will "open", relative to the icon anchor.
     *
     * @option tooltipAnchor: Point = [0, 0]
     * The coordinates of the point from which tooltips will "open", relative to the icon anchor.
     *
     * @option shadowUrl: String = null
     * The URL to the icon shadow image. If not specified, no shadow image will be created.
     *
     * @option shadowRetinaUrl: String = null
     *
     * @option shadowSize: Point = null
     * Size of the shadow image in pixels.
     *
     * @option shadowAnchor: Point = null
     * The coordinates of the "tip" of the shadow (relative to its top left corner) (the same
     * as iconAnchor if not specified).
     *
     * @option className: String = ''
     * A custom class name to assign to both icon and shadow images. Empty by default.
     */

/* @section
     * Classes extending L.Control will inherit the following methods:
     *
     * @method getPosition: string
     * Returns the position of the control.
     */

/* @section
     * Classes extending `L.Layer` will inherit the following methods:
     *
     * @method addTo(map: Map|LayerGroup): this
     * Adds the layer to the given map or layer group.
     */

/* Box */

/* binding */

/* getSystemStyles */

/* harmony export */

/* harmony import */

/* packSx */

/* useComponentDefaultProps */

/**
 * @license React
 * react-dom-server-legacy.browser.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * react-dom-server.browser.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/***/

//

// 	layer.bindPopup('Hello');

//  view regardless of where the mouse was.

// (e.g. `0.5` or `0.1`) allow for greater granularity. A value of `0`

// (e.g. to validate an API token).

// (unless [`L.DomEvent.stopPropagation`](#domevent-stoppropagation) is used).

// **(required)** Comma-separated list of WMS layers to show.

// @aka Canvas options

// @aka CircleMarker options

// @aka Control Options

// @aka Control.Attribution options

// @aka Control.Layers options

// @aka Control.Scale options

// @aka Control.Zoom options

// @aka DivIcon options

// @aka DivOverlay options

// @aka Draggable options

// @aka GridLayer options

// @aka ImageOverlay options

// @aka Marker options

// @aka Path options

// @aka Polyline options

// @aka Popup options

// @aka Renderer options

// @aka TileLayer options

// @aka TileLayer.WMS options

// @aka Tooltip options

// @aka VideoOverlay options

// @alternative

// @constructor L.Draggable(el: HTMLElement, dragHandle?: HTMLElement, preventOutline?: Boolean, options?: Draggable options)

// @method add(otherPoint: Point): Point

// @method addAttribution(text: String): this

// @method addBaseLayer(layer: Layer, name: String): this

// @method addControl(control: Control): this

// @method addData( <GeoJSON> data ): this

// @method addEventParent(obj: Evented): this

// @method addHandler(name: String, HandlerClass: Function): this

// @method addHooks()

// @method addLatLng(latlng: LatLng, latlngs?: LatLng[]): this

// @method addLayer(layer: Layer): this

// @method addOverlay(layer: Layer, name: String): this

// @method addTo(map: Map): this

// @method bindPopup(content: String|HTMLElement|Function|Popup, options?: Popup options): this

// @method bindTooltip(content: String|HTMLElement|Function|Tooltip, options?: Tooltip options): this

// @method bringToBack(): this

// @method bringToBack: this

// @method bringToFront(): this

// @method bringToFront: this

// @method ceil(): Point

// @method clearLayers(): this

// @method clone(): Point

// @method close(): this

// @method closePopup(): this

// @method closePopup(popup?: Popup): this

// @method closeTooltip(): this

// @method closeTooltip(tooltip: Tooltip): this

// @method closestLayerPoint(p: Point): Point

// @method collapse(): this

// @method containerPointToLatLng(point: Point): LatLng

// @method containerPointToLayerPoint(point: Point): Point

// @method contains (latlng: LatLng): Boolean

// @method contains(otherBounds: Bounds): Boolean

// @method contains(otherBounds: LatLngBounds): Boolean

// @method contains(otherPoint: Point): Boolean

// @method contains(point: Point): Boolean

// @method createIcon(oldIcon?: HTMLElement): HTMLElement

// @method createPane(name: String, container?: HTMLElement): HTMLElement

// @method createShadow(oldIcon?: HTMLElement): HTMLElement

// @method createTile(coords: Object, done?: Function): HTMLElement

// @method disable()

// @method disable(): this

// @method distance(latlng1: LatLng, latlng2: LatLng): Number

// @method distanceTo(otherLatLng: LatLng): Number

// @method distanceTo(otherPoint: Point): Number

// @method divideBy(num: Number): Point

// @method eachLayer(fn: Function, context?: Object): this

// @method enable()

// @method enable(): this

// @method enabled(): Boolean

// @method equals(otherBounds: Bounds): Boolean

// @method equals(otherBounds: LatLngBounds, maxMargin?: Number): Boolean

// @method equals(otherLatLng: LatLng, maxMargin?: Number): Boolean

// @method equals(otherPoint: Point): Boolean

// @method expand(): this

// @method extend(latlng: LatLng): this

// @method extend(otherBounds: Bounds): this

// @method extend(otherBounds: LatLngBounds): this

// @method extend(point: Point): this

// @method fire(type: String, data?: Object, propagate?: Boolean): this

// @method fitBounds(bounds: LatLngBounds, options?: fitBounds options): this

// @method fitWorld(options?: fitBounds options): this

// @method floor(): Point

// @method flyTo(latlng: LatLng, zoom?: Number, options?: Zoom/pan options): this

// @method flyToBounds(bounds: LatLngBounds, options?: fitBounds options): this

// @method getAttribution: String

// @method getBottomLeft(): Point

// @method getBottomRight(): Point

// @method getBounds(): LatLngBounds

// @method getBoundsZoom(bounds: LatLngBounds, inside?: Boolean, padding?: Point): Number

// @method getCenter(): LatLng

// @method getCenter(round?: Boolean): Point

// @method getContainer: HTMLElement

// @method getContent: String|HTMLElement

// @method getEast(): Number

// @method getElement(): HTMLElement

// @method getElement(): HTMLVideoElement

// @method getElement(): SVGElement

// @method getElement: String|HTMLElement

// @method getIcon: Icon

// @method getLatLng(): LatLng

// @method getLatLng: LatLng

// @method getLatLngs(): LatLng[]

// @method getLayer(id: Number): Layer

// @method getLayerId(layer: Layer): Number

// @method getLayers(): Layer[]

// @method getMaxZoom(): Number

// @method getMinZoom(): Number

// @method getNorth(): Number

// @method getNorthEast(): LatLng

// @method getNorthWest(): LatLng

// @method getPane(name? : String): HTMLElement

// @method getPane(pane: String|HTMLElement): HTMLElement

// @method getPanes(): Object

// @method getPixelBounds(): Bounds

// @method getPixelOrigin(): Point

// @method getPixelWorldBounds(zoom?: Number): Bounds

// @method getPopup(): Popup

// @method getProjectedBounds(zoom: Number): Bounds

// @method getRadius(): Number

// @method getScaleZoom(scale: Number, fromZoom: Number): Number

// @method getSize(): Point

// @method getSouth(): Number

// @method getSouthEast(): LatLng

// @method getSouthWest(): LatLng

// @method getTileSize: Point

// @method getTileUrl(coords: Object): String

// @method getTooltip(): Tooltip

// @method getTopLeft(): Point

// @method getTopRight(): Point

// @method getWest(): Number

// @method getZoom(): Number

// @method getZoomScale(toZoom: Number, fromZoom: Number): Number

// @method hasLayer(id: Number): Boolean

// @method hasLayer(layer: Layer): Boolean

// @method intersects(otherBounds: Bounds): Boolean

// @method intersects(otherBounds: LatLngBounds): Boolean

// @method invalidateSize(animate: Boolean): this

// @method invalidateSize(options: Zoom/pan options): this

// @method invoke(methodName: String, …): this

// @method isEmpty(): Boolean

// @method isLoading: Boolean

// @method isOpen: Boolean

// @method isPopupOpen(): boolean

// @method isTooltipOpen(): boolean

// @method isValid(): Boolean

// @method latLngToContainerPoint(latlng: LatLng): Point

// @method latLngToLayerPoint(latlng: LatLng): Point

// @method latLngToPoint(latlng: LatLng, zoom: Number): Point

// @method layerPointToContainerPoint(point: Point): Point

// @method layerPointToLatLng(point: Point): LatLng

// @method listens(type: String, fn: Function, context?: Object, propagate?: Boolean): Boolean

// @method listens(type: String, propagate?: Boolean): Boolean

// @method locate(options?: Locate options): this

// @method mouseEventToContainerPoint(ev: MouseEvent): Point

// @method mouseEventToLatLng(ev: MouseEvent): LatLng

// @method mouseEventToLayerPoint(ev: MouseEvent): Point

// @method multiplyBy(num: Number): Point

// @method once(…): this

// @method openOn(map: Map): this

// @method openPopup(content: String|HTMLElement, latlng: LatLng, options?: Popup options): this

// @method openPopup(latlng?: LatLng): this

// @method openPopup(popup: Popup): this

// @method openTooltip(content: String|HTMLElement, latlng: LatLng, options?: Tooltip options): this

// @method openTooltip(latlng?: LatLng): this

// @method openTooltip(tooltip: Tooltip): this

// @method overlaps(otherBounds: Bounds): Boolean

// @method overlaps(otherBounds: LatLngBounds): Boolean

// @method pad(bufferRatio: Number): Bounds

// @method pad(bufferRatio: Number): LatLngBounds

// @method panBy(offset: Point, options?: Pan options): this

// @method panInside(latlng: LatLng, options?: padding options): this

// @method panInsideBounds(bounds: LatLngBounds, options?: Pan options): this

// @method panTo(latlng: LatLng, options?: Pan options): this

// @method pointToLatLng(point: Point, zoom: Number): LatLng

// @method project(latlng: LatLng): Point

// @method project(latlng: LatLng, zoom: Number): Point

// @method redraw(): this

// @method redraw: this

// @method remove(): this

// @method remove: this

// @method removeAttribution(text: String): this

// @method removeControl(control: Control): this

// @method removeEventParent(obj: Evented): this

// @method removeFrom(group: LayerGroup): this

// @method removeFrom(map: Map): this

// @method removeHooks()

// @method removeLayer(id: Number): this

// @method removeLayer(layer: Layer): this

// @method resetStyle( <Path> layer? ): this

// @method round(): Point

// @method run(el: HTMLElement, newPos: Point, duration?: Number, easeLinearity?: Number)

// @method scale(zoom: Number): Number

// @method scaleBy(scale: Point): Point

// @method setBounds(bounds: LatLngBounds): this

// @method setBounds(latLngBounds: LatLngBounds): this

// @method setContent(htmlContent: String|HTMLElement|Function): this

// @method setIcon(icon: Icon): this

// @method setLatLng(latLng: LatLng): this

// @method setLatLng(latlng: LatLng): this

// @method setLatLngs(latlngs: LatLng[]): this

// @method setMaxBounds(bounds: LatLngBounds): this

// @method setMaxZoom(zoom: Number): this

// @method setMinZoom(zoom: Number): this

// @method setOpacity(opacity: Number): this

// @method setParams(params: Object, noRedraw?: Boolean): this

// @method setPopupContent(content: String|HTMLElement|Popup): this

// @method setPosition(position: string): this

// @method setPrefix(prefix: String|false): this

// @method setRadius(radius: Number): this

// @method setStyle( <Function> style ): this

// @method setStyle(style: Path options): this

// @method setTooltipContent(content: String|HTMLElement|Tooltip): this

// @method setUrl(url: String): this

// @method setUrl(url: String, noRedraw?: Boolean): this

// @method setView(center: LatLng, zoom: Number, options?: Zoom/pan options): this

// @method setZIndex(value: Number): this

// @method setZIndex(zIndex: Number): this

// @method setZIndexOffset(offset: Number): this

// @method setZoom(zoom: Number, options?: Zoom/pan options): this

// @method setZoomAround(latlng: LatLng, zoom: Number, options: Zoom options): this

// @method setZoomAround(offset: Point, zoom: Number, options: Zoom options): this

// @method stop()

// @method stop(): this

// @method stopLocate(): this

// @method subtract(otherPoint: Point): Point

// @method toBBoxString(): String

// @method toBounds(sizeInMeters: Number): LatLngBounds

// @method toGeoJSON(precision?: Number|false): Object

// @method toString(): String

// @method toggle(layer?: Layer): this

// @method togglePopup(): this

// @method toggleTooltip(): this

// @method transform(point: Point, scale?: Number): Point

// @method trunc(): Point

// @method unbindPopup(): this

// @method unbindTooltip(): this

// @method unproject(point: Point): LatLng

// @method unproject(point: Point, zoom: Number): LatLng

// @method unscaleBy(scale: Point): Point

// @method untransform(point: Point, scale?: Number): Point

// @method update: null

// @method whenReady(fn: Function, context?: Object): this

// @method wrap(): LatLng

// @method wrapLatLng(latlng: LatLng): LatLng

// @method wrapLatLngBounds(bounds: LatLngBounds): LatLngBounds

// @method zoom(scale: Number): Number

// @method zoomIn(delta?: Number, options?: Zoom options): this

// @method zoomOut(delta?: Number, options?: Zoom options): this

// @namespace DivOverlay

// @namespace Map; @method getRenderer(layer: Path): Renderer

// @namespace Popup

// @option alt: String = ''

// @option alt: String = 'Marker'

// @option attribution: String = null

// @option autoClose: Boolean = true

// @option autoPan: Boolean = false

// @option autoPan: Boolean = true

// @option autoPanOnFocus: Boolean = true

// @option autoPanPadding: Point = Point(5, 5)

// @option autoPanPadding: Point = Point(50, 50)

// @option autoPanPaddingBottomRight: Point = null

// @option autoPanPaddingTopLeft: Point = null

// @option autoPanSpeed: Number = 10

// @option autoZIndex: Boolean = true

// @option autoplay: Boolean = true

// @option bgPos: Point = [0, 0]

// @option bounceAtZoomLimits: Boolean = true

// @option bounds: LatLngBounds = undefined

// @option boxZoom: Boolean = true

// @option bubblingMouseEvents: Boolean = false

// @option bubblingMouseEvents: Boolean = true

// @option center: LatLng = undefined

// @option className: String = ''

// @option clickTolerance: Number = 3

// @option closeButton: Boolean = true

// @option closeOnClick: Boolean = *

// @option closeOnEscapeKey: Boolean = true

// @option collapsed: Boolean = true

// @option color: String = '#3388ff'

// @option content: String|HTMLElement|Function = ''

// @option crossOrigin: Boolean|String = false

// @option crs: CRS = L.CRS.EPSG3857

// @option crs: CRS = null

// @option dashArray: String = null

// @option dashOffset: String = null

// @option detectRetina: Boolean = false

// @option direction: String = 'auto'

// @option doubleClickZoom: Boolean|String = true

// @option draggable: Boolean = false

// @option dragging: Boolean = true

// @option easeLinearity: Number = 0.2

// @option errorOverlayUrl: String = ''

// @option errorTileUrl: String = ''

// @option fadeAnimation: Boolean = true

// @option fill: Boolean = depends

// @option fillColor: String = *

// @option fillOpacity: Number = 0.2

// @option fillRule: String = 'evenodd'

// @option format: String = 'image/jpeg'

// @option hideSingleBase: Boolean = false

// @option html: String|HTMLElement = ''

// @option icon: Icon = *

// @option imperial: Boolean = True

// @option inertia: Boolean = *

// @option inertiaDeceleration: Number = 3000

// @option inertiaMaxSpeed: Number = Infinity

// @option interactive: Boolean = false

// @option keepAspectRatio: Boolean = true

// @option keepBuffer: Number = 2

// @option keepInView: Boolean = false

// @option keyboard: Boolean = true

// @option keyboardPanDelta: Number = 80

// @option layers: Layer[] = []

// @option layers: String = ''

// @option lineCap: String= 'round'

// @option lineJoin: String = 'round'

// @option loop: Boolean = true

// @option markerZoomAnimation: Boolean = true

// @option maxBounds: LatLngBounds = null

// @option maxBoundsViscosity: Number = 0.0

// @option maxHeight: Number = null

// @option maxNativeZoom: Number = undefined

// @option maxWidth: Number = 100

// @option maxWidth: Number = 300

// @option maxZoom: Number = *

// @option maxZoom: Number = 18

// @option maxZoom: Number = undefined

// @option metric: Boolean = True

// @option minNativeZoom: Number = undefined

// @option minWidth: Number = 50

// @option minZoom: Number = *

// @option minZoom: Number = 0

// @option muted: Boolean = false

// @option noClip: Boolean = false

// @option noWrap: Boolean = false

// @option offset: Point = Point(0, 0)

// @option offset: Point = Point(0, 7)

// @option opacity: Number = 0.9

// @option opacity: Number = 1.0

// @option padding: Number = 0.1

// @option pane: String = 'markerPane'

// @option pane: String = 'overlayPane'

// @option pane: String = 'popupPane'

// @option pane: String = 'tilePane'

// @option pane: String = 'tooltipPane'

// @option pane: String = undefined

// @option permanent: Boolean = false

// @option playsInline: Boolean = true

// @option position: String = 'topright'

// @option prefix: String|false = 'Leaflet'

// @option radius: Number = 10

// @option referrerPolicy: Boolean|String = false

// @option renderer: Renderer = *

// @option riseOffset: Number = 250

// @option riseOnHover: Boolean = false

// @option scrollWheelZoom: Boolean|String = true

// @option shadowPane: String = 'shadowPane'

// @option smoothFactor: Number = 1.0

// @option sortFunction: Function = *

// @option sortLayers: Boolean = false

// @option sticky: Boolean = false

// @option stroke: Boolean = true

// @option styles: String = ''

// @option subdomains: String|String[] = 'abc'

// @option tapHold: Boolean

// @option tapTolerance: Number = 15

// @option tileSize: Number|Point = 256

// @option title: String = ''

// @option tms: Boolean = false

// @option tolerance: Number = 0

// @option touchZoom: Boolean|String = *

// @option trackResize: Boolean = true

// @option transform3DLimit: Number = 2^23

// @option transparent: Boolean = false

// @option updateInterval: Number = 200

// @option updateWhenIdle: Boolean = (depends)

// @option updateWhenZooming: Boolean = true

// @option uppercase: Boolean = false

// @option version: String = '1.1.1'

// @option weight: Number = 3

// @option wheelDebounceTime: Number = 40

// @option wheelPxPerZoomLevel: Number = 60

// @option worldCopyJump: Boolean = false

// @option zIndex: Number = 1

// @option zIndexOffset: Number = 0

// @option zoom: Number = undefined

// @option zoomAnimation: Boolean = true

// @option zoomAnimationThreshold: Number = 4

// @option zoomDelta: Number = 1

// @option zoomInText: String = '<span aria-hidden="true">+</span>'

// @option zoomInTitle: String = 'Zoom in'

// @option zoomOffset: Number = 0

// @option zoomOutText: String = '<span aria-hidden="true">&#x2212;</span>'

// @option zoomOutTitle: String = 'Zoom out'

// @option zoomReverse: Boolean = false

// @option zoomSnap: Number = 1

// @property code: String

// @property infinite: Boolean

// @property wrapLat: Number[]

// @property wrapLng: Number[]

// @section

// @section Animation Options

// @section Conversion Methods

// @section Draggable marker options

// @section Extension methods

// @section Geolocation methods

// @section Interaction Options

// @section Interaction events

// @section Map State Options

// @section Map state change events

// @section Methods for Getting Map State

// @section Methods for modifying map state

// @section Mouse wheel options

// @section Other Methods

// @section Panning Inertia Options

// @section Touch interaction options

// @uninheritable

// A [compare function](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Array/sort)

// A custom CSS class name to assign to the overlay.

// A custom CSS class name to assign to the popup.

// A custom class name to assign to the image. Empty by default.

// A custom class name to assign to the tile layer. Empty by default.

// A string that defines [how the inside of a shape](https://developer.mozilla.org/docs/Web/SVG/Attribute/fill-rule) is determined.

// A string that defines [shape to be used at the corners](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linejoin) of the stroke.

// A string that defines [shape to be used at the end](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-linecap) of the stroke.

// A string that defines the [distance into the dash pattern to start the dash](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-dashoffset). Doesn't work on `Canvas`-powered layers in [some old browsers](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility).

// A string that defines the stroke [dash pattern](https://developer.mozilla.org/docs/Web/SVG/Attribute/stroke-dasharray). Doesn't work on `Canvas`-powered layers in [some old browsers](https://developer.mozilla.org/docs/Web/API/CanvasRenderingContext2D/setLineDash#Browser_compatibility).

// Adds a GeoJSON object to the layer.

// Adds a base layer (radio button entry) with the given name to the control.

// Adds a given point to the polyline. By default, adds to the first ring of

// Adds a new `Handler` to the map, given its name and constructor function.

// Adds an attribution text (e.g. `'&copy; OpenStreetMap contributors'`).

// Adds an event parent - an `Evented` that will receive propagated events

// Adds an overlay (checkbox entry) with the given name to the control.

// Adds the control to the given map.

// Adds the given control to the map

// Adds the given layer to the group.

// Adds the given layer to the map

// Adds the overlay to the map.

// Adds the popup to the map and closes the previous one.

// Alternative to `layer.togglePopup()`/`.toggleTooltip()`.

// Alternative to `map.closePopup(popup)`/`.closeTooltip(tooltip)`

// Alternative to `map.openPopup(popup)`.

// Alternative to `map.openPopup(popup)`/`.openTooltip(tooltip)`.

// Amount of pixels to pan when pressing an arrow key.

// An array of two numbers defining whether the longitude (horizontal) coordinate

// Argument may be omitted only for overlay bound to layer.

// Array of layers that will be added to the map initially

// As `createIcon`, but for the shadow beneath it.

// Behaves as [`on(…)`](#evented-on), except the listener will only get fired once and then removed.

// Binds a popup to the layer with the passed `content` and sets up the

// Binds a tooltip to the layer with the passed `content` and sets up the

// Brings the layer group to the back of all other layers

// Brings the layer group to the top of all other layers

// Brings the layer to the bottom of all overlays.

// Brings the layer to the bottom of all path layers.

// Brings the layer to the top of all overlays.

// Brings the layer to the top of all path layers.

// Brings the tile layer to the bottom of all tile layers.

// Brings the tile layer to the top of all tile layers.

// Brings this overlay in front of other overlays (in the same map pane).

// Brings this overlay to the back of other overlays (in the same map pane).

// By default the layer will be added to the map's [overlay pane](#map-overlaypane). Overriding this option will cause the layer to be placed on another pane by default.

// By default this means longitude is wrapped around the dateline so its

// By default this means the center longitude is wrapped around the dateline so its

// By default, a smooth zoom animation (during a [touch zoom](#map-touchzoom) or a [`flyTo()`](#map-flyto)) will update grid layers every integer zoom level. Setting this option to `false` will update the grid layer only when the smooth animation ends.

// By default, it sorts layers alphabetically by their name.

// By default, marker images zIndex is set automatically based on its latitude. Use this option if you want to put the marker on top of all others (or below), specifying a high value like `1000` (or high negative value, respectively).

// By default, the zoom level snaps to the nearest integer; lower values

// CONCATENATED MODULE: ./node_modules/@mantine/core/esm/Flex/flex-props.js

// CRS's `wrapLat` and `wrapLng` properties, if they are outside the CRS's bounds.

// CRS's bounds.

// Called internally when the icon has to be shown, returns a `<img>` HTML element

// Called only internally, must be overridden by classes extending `GridLayer`.

// Called only internally, overrides GridLayer's [`createTile()`](#gridlayer-createtile)

// Called only internally, returns the URL for a tile given its coordinates.

// Called when the handler is disabled, should remove the event hooks added previously.

// Called when the handler is enabled, should add event hooks.

// Calls `methodName` on every layer contained in this group, passing any

// Calls `setZIndex` on every layer contained in this group, passing the z-index.

// Canvas obviously doesn't have mouse events for individual drawn objects,

// Causes the layer to clear all the tiles and request them again.

// Certain screen readers intercept the key event and instead send a click event

// Changes styles of GeoJSON vector layers with the given style function.

// Changes the URL of the image.

// Changes the [opacity](#gridlayer-opacity) of the grid layer.

// Changes the [zIndex offset](#marker-zindexoffset) of the marker.

// Changes the [zIndex](#gridlayer-zindex) of the grid layer.

// Changes the [zIndex](#imageoverlay-zindex) of the image overlay.

// Changes the appearance of a Path based on the options in the `Path options` object.

// Changes the marker icon.

// Changes the marker position to the given point.

// Changes the opacity of the marker.

// Checks if the map container size changed and updates the map if so —

// Classes extending `L.Layer` will inherit the following options:

// Classes extending `TileLayer` can override this function to provide custom tile URL naming schemes.

// Classes inheriting from `Handler` must implement the two following methods:

// Closes the overlay.

// Closes the popup bound to this layer if it is open.

// Closes the popup previously opened with [openPopup](#map-openpopup) (or the given one).

// Closes the tooltip bound to this layer if it is open.

// Closes the tooltip given as parameter.

// Collapse the control container if expanded.

// Comma-separated list of WMS styles.

// Controls how much the map's zoom level will change after a

// Controls the presence of a close button in the popup.

// Coordinate Reference System to use for the WMS requests, defaults to

// Coordinates values are rounded with [`formatNum`](#util-formatnum) function with given `precision`.

// Creates a `Draggable` object for moving `el` when you start dragging the `dragHandle` element (equals `el` itself by default).

// Creates a new [map pane](#map-pane) with the given name if it doesn't exist already,

// Creates a popup with the specified content and options and opens it in the given point on a map.

// Creates a tooltip with the specified content and options and open it.

// Custom HTML code to put inside the div element, empty by default. Alternatively,

// DOM event handling

// Decreases the zoom of the map by `delta` ([`zoomDelta`](#map-zoomdelta) by default).

// Defines the maximum size of a CSS translation transform. The default

// Destroys the map and clears all related event listeners.

// Direction where to open the tooltip. Possible values are: `right`, `left`,

// Disable polyline clipping.

// Disables the dragging ability

// Disables the handler

// Distance (in pixels to the left/right and to the top/bottom) of the

// Don't trust window-geometry-based delta

// EXPORTS

// EXTERNAL MODULE: ./node_modules/@mantine/core/esm/Box/Box.js

// EXTERNAL MODULE: ./node_modules/@mantine/core/esm/Box/style-system-props/get-system-styles/get-system-styles.js

// EXTERNAL MODULE: ./node_modules/@mantine/styles/esm/theme/MantineProvider.js

// EXTERNAL MODULE: ./node_modules/react/index.js

// Enables simulation of `contextmenu` event, default is `true` for mobile Safari.

// Enables the dragging ability

// Enables the handler

// Equivalent of setting both top left and bottom right autopan padding to the same value.

// Expand the control container if collapsed.

// Extend the bounds to contain the given bounds

// Extend the bounds to contain the given point

// Extends the bounds to contain the given point.

// Fill color. Defaults to the value of the [`color`](#path-color) option

// Fill opacity.

// Fires an event of the specified type. You can optionally provide a data

// For example, a ratio of 0.5 extends the bounds by 50% in each direction.

// Forces the map's zoom level to always be a multiple of this, particularly

// Get the bounds that this ImageOverlay covers

// Given a MouseEvent object, returns geographical coordinate where the

// Given a MouseEvent object, returns the pixel coordinate relative to

// Given a MouseEvent object, returns the pixel coordinate relative to the

// Given a geographical coordinate, returns the corresponding pixel coordinate

// Given a pixel coordinate relative to the [origin pixel](#map-getpixelorigin),

// Given a pixel coordinate relative to the map container, returns

// Given a pixel coordinate relative to the map container, returns the corresponding

// Given a projected coordinate returns the corresponding LatLng.

// GridLayer will only be displayed once at low zoom levels. Has no

// How many scroll pixels (as reported by [L.DomEvent.getWheelDelta](#domevent-getwheeldelta))

// How much to extend the click tolerance around a path/object on the map.

// How much to extend the clip area around the map view (relative to its size)

// How much to simplify the polyline on each zoom level. More means

// IE7 bugs out if you create a radio dynamically, so you have to do it this hacky way (see https://stackoverflow.com/a/119079)

// Icon instance to use for rendering the marker.

// If `latlng` is already within the (optionally padded) display bounds,

// If `layer` is omitted, the style of all features in the current layer is reset.

// If `maxBounds` is set, this option will control how solid the bounds

// If `options.debounceMoveend` is `true`, it will delay `moveend` event so

// If `true` and user is on a retina display, it will request four tiles of half the specified size and a bigger zoom level in place of one to utilize the high resolution.

// If `true`, WMS request parameter keys will be uppercase.

// If `true`, inverses Y axis numbering for tiles (turn this on for [TMS](https://en.wikipedia.org/wiki/Tile_Map_Service) services).

// If `true`, the WMS service will return images with transparency.

// If `true`, the base layers in the control will be hidden when there is only one.

// If `true`, the control will assign zIndexes in increasing order to all of its layers so that the order is preserved when switching them on/off.

// If `true`, the control will be collapsed into an icon and expanded on mouse hover, touch, or keyboard activation.

// If `true`, the image overlay will emit [mouse events](#interactive-layer) when clicked or hovered.

// If `true`, the marker will get on top of others when you hover the mouse over it.

// If `zoom` is omitted, the map's current zoom level is used.

// If a String is provided, all tiles will have their crossOrigin attribute set to the String provided. This is needed if you want to access tile pixel data.

// If a String is provided, all tiles will have their referrerPolicy attribute set to the String provided.

// If a String is provided, the image will have its crossOrigin attribute set to the String provided. This is needed if you want to access image pixel data.

// If any custom options not documented here are used, they will be sent to the

// If enabled, panning of the map will have an inertia effect where

// If not specified and at least one `GridLayer` or `TileLayer` is in the map,

// If not specified, a common instance of `L.Icon.Default` is used.

// If set to true, the zoom number used in tile URLs will be reversed (`maxZoom - zoom` instead of `zoom`)

// If set, creates a scrollable container of the given height

// If set, tiles will only be loaded inside the set `LatLngBounds`.

// If the URL does not change, the layer will not be redrawn unless

// If true, the coordinate space will be unbounded (infinite in both axes)

// If true, the popup/tooltip will listen to the mouse events.

// If true, the tooltip will follow the mouse instead of being fixed at the feature center.

// Increases the zoom of the map by `delta` ([`zoomDelta`](#map-zoomdelta) by default).

// Initial geographic center of the map

// Initial map zoom level

// Inverse of [`project`](#map-project).

// Inverse of `scale()`, returns the zoom level corresponding to a scale

// Inverse of `scaleBy`. Divide each coordinate of the current point by

// Iterates over the layers of the group, optionally specifying context of the iterator function.

// Layers extending `GridLayer` shall reimplement the following method.

// Layers extending `TileLayer` might reimplement the following method.

// Legacy IE pixels

// Legacy Moz lines

// Legacy Moz pages

// Like `wrapLng`, but for the latitude (vertical) axis.

// Limits the rate at which a wheel can fire (in milliseconds). By default

// Lines

// Load new tiles only when panning ends.

// Makes the map focusable and allows users to navigate the map with keyboard

// Max speed of the inertial movement, in pixels/second.

// Max width of the popup, in pixels.

// Maximum width of the control in pixels. The width is set dynamically to show round values (e.g. 100, 200, 500).

// Maximum zoom level of the map.

// Maximum zoom number the tile source has available. If it is specified,

// Mean Earth Radius, as recommended for use by

// Merges an object with the new parameters and re-requests tiles on the current screen (unless `noRedraw` was set to true).

// Min width of the popup, in pixels.

// Minimum zoom level of the map.

// Minimum zoom number the tile source has available. If it is specified,

// Mobile browsers will play the video right where it is instead of open it up in fullscreen mode.

// Multiply each coordinate of the current point by each coordinate of

// Needed by the `Canvas` renderer for interactivity

// Negative values will retract the bounds.

// Normalizes the [tileSize option](#gridlayer-tilesize) into a point. Used by the `createTile()` method.

// Note that, if your page doesn't use HTTPS, this method will fail in

// Number of pixels the map should pan by.

// On some browsers autoplay will only work with `muted: true`

// Only accepts actual `L.LatLngBounds` instances, not arrays.

// Only accepts actual `L.Point` instances, not arrays.

// Opacity of the tiles. Can be used in the `createTile()` function.

// Opens or closes the overlay bound to layer depending on its current state.

// Opens or closes the popup bound to this layer depending on its current state.

// Opens or closes the tooltip bound to this layer depending on its current state.

// Opens the bound popup at the specified `latlng` or at the default popup anchor if no `latlng` is passed.

// Opens the bound tooltip at the specified `latlng` or at the default tooltip anchor if no `latlng` is passed.

// Opens the specified popup while closing the previously opened (to make sure only one is opened at one time for usability).

// Opens the specified tooltip.

// Option inherited from "Interactive layer" abstract class

// Optional offset of the tooltip position.

// Optional relative position of the background, in pixels

// Pages

// Pans the map by a given number of pixels (animated).

// Pans the map the minimum amount to make the `latlng` visible. Use

// Pans the map to a given center.

// Pans the map to the closest view that would lie inside the given bounds (if it's not already), controlling the animation using the options specific, if any.

// Pixels

// Precision limit of a 32-bit float

// Private method to load tiles in the grid's active zoom level according to map bounds

// Projects a geographical coordinate `LatLng` according to the projection

// Projects geographical coordinates into coordinates in units accepted for

// Projects geographical coordinates into pixel coordinates for a given zoom.

// Radius of the circle marker, in pixels

// Redraws the layer. Sometimes useful after you changed the coordinates that the path uses.

// Redraws the rectangle with the passed bounds.

// Refer to [CORS Settings](https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes) for valid String values.

// Refer to [HTMLImageElement.referrerPolicy](https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/referrerPolicy) for valid String values.

// Relevant for supported browsers. See [browser compatibility](https://developer.mozilla.org/en-US/docs/Web/CSS/object-fit)

// Remove the given layer from the control.

// Removes all the layers from the group.

// Removes an attribution text.

// Removes an event parent, so it will stop receiving propagated events

// Removes the control from the map it is currently active on.

// Removes the given control from the map

// Removes the given layer from the group.

// Removes the given layer from the map.

// Removes the layer from the given `LayerGroup`

// Removes the layer from the given map

// Removes the layer from the map it is currently active on.

// Removes the layer with the given internal ID from the group.

// Removes the popup previously bound with `bindPopup`.

// Removes the tooltip previously bound with `bindTooltip`.

// Replaces all the points in the polyline with the given array of geographical points.

// Resets the given vector layer's style to the original GeoJSON style, useful for resetting style after hover events.

// Restricts the map view to the given bounds (see the [maxBounds](#map-maxbounds) option).

// Returns `true` if a particular event type has any listeners attached to it.

// Returns `true` if any tile in the grid layer has not finished loading.

// Returns `true` if both coordinates of the given point are less than the corresponding current point coordinates (in absolute values).

// Returns `true` if the Polyline has no LatLngs.

// Returns `true` if the bounds are properly initialized.

// Returns `true` if the given `LatLng` point is at the same position (within a small margin of error). The margin of error can be overridden by setting `maxMargin` to a small number.

// Returns `true` if the given internal ID is currently added to the group.

// Returns `true` if the given layer is currently added to the group.

// Returns `true` if the given layer is currently added to the map

// Returns `true` if the given point has the same coordinates.

// Returns `true` if the handler is enabled

// Returns `true` if the popup bound to this layer is currently open.

// Returns `true` if the rectangle contains the given one.

// Returns `true` if the rectangle contains the given point.

// Returns `true` if the rectangle intersects the given bounds. Two bounds

// Returns `true` if the rectangle intersects the given bounds. Two bounds intersect if they have at least one point in common.

// Returns `true` if the rectangle is equivalent (within a small margin of error) to the given bounds. The margin of error can be overridden by setting `maxMargin` to a small number.

// Returns `true` if the rectangle is equivalent to the given bounds.

// Returns `true` if the rectangle overlaps the given bounds. Two bounds

// Returns `true` if the rectangle overlaps the given bounds. Two bounds overlap if their intersection is an area.

// Returns `true` if the tooltip bound to this layer is currently open.

// Returns `true` when the overlay is visible on the map.

// Returns a [`GeoJSON`](https://en.wikipedia.org/wiki/GeoJSON) representation of the layer group (as a GeoJSON `FeatureCollection`, `GeometryCollection`, or `MultiPoint`).

// Returns a [map pane](#map-pane), given its name or its HTML element (its identity).

// Returns a `LatLngBounds` with the same size as the given one, ensuring

// Returns a `LatLngBounds` with the same size as the given one, ensuring that

// Returns a `LatLng` where `lat` and `lng` has been wrapped according to the

// Returns a `LatLng` where lat and lng has been wrapped according to the

// Returns a copy of the current point with ceiled coordinates (rounded up).

// Returns a copy of the current point with floored coordinates (rounded down).

// Returns a copy of the current point with rounded coordinates.

// Returns a copy of the current point with truncated coordinates (rounded towards zero).

// Returns a copy of the current point.

// Returns a new `LatLngBounds` object in which each boundary is `sizeInMeters/2` meters apart from the `LatLng`.

// Returns a new `LatLng` object with the longitude wrapped so it's always between -180 and +180 degrees.

// Returns a plain object containing the names of all [panes](#map-pane) as keys and

// Returns a string representation of the point (for debugging purposes).

// Returns a string representation of the point for debugging purposes.

// Returns a string with bounding box coordinates in a 'southwest_lng,southwest_lat,northeast_lng,northeast_lat' format. Useful for sending requests to web services that return geo data.

// Returns a transformed point, optionally multiplied by the given scale.

// Returns an array of all the layers added to the group.

// Returns an array of the points in the path, or nested arrays of points in case of multi-polyline.

// Returns bounds created by extending or retracting the current bounds by a given ratio in each direction.

// Returns the HTML container of the overlay.

// Returns the HTML element that contains the map.

// Returns the HTML element that contains the tiles for this layer.

// Returns the HTMLElement that contains the control.

// Returns the LatLngBounds of the Feature Group (created from bounds and coordinates of its children).

// Returns the `HTMLElement` corresponding to the given `coords`. If the `done` callback

// Returns the `HTMLElement` representing the named pane on the map. If `name` is omitted, returns the pane for this layer.

// Returns the `LatLngBounds` of the path.

// Returns the bottom-left point of the bounds.

// Returns the bottom-right point of the bounds (i.e. [`this.max`](#bounds-max)).

// Returns the bounds of the current map view in projected pixel

// Returns the cartesian distance between the current and the given points.

// Returns the center ([centroid](http://en.wikipedia.org/wiki/Centroid)) of the Polygon.

// Returns the center ([centroid](https://en.wikipedia.org/wiki/Centroid)) of the polyline.

// Returns the center of the ImageOverlay.

// Returns the center point of the bounds.

// Returns the content of the overlay.

// Returns the current geographical position of the circle marker

// Returns the current geographical position of the marker.

// Returns the current icon used by the marker

// Returns the current radius of a circle. Units are in meters.

// Returns the current radius of the circle

// Returns the current size of the map container (in pixels).

// Returns the current zoom level of the map view

// Returns the distance (in meters) to the given `LatLng` calculated using the [Spherical Law of Cosines](https://en.wikipedia.org/wiki/Spherical_law_of_cosines).

// Returns the distance between two geographical coordinates according to

// Returns the distance between two geographical coordinates.

// Returns the east longitude of the bounds

// Returns the geographical bounds visible in the current map view

// Returns the geographical center of the map view

// Returns the geographical point of the overlay.

// Returns the instance of [`HTMLImageElement`](https://developer.mozilla.org/docs/Web/API/HTMLImageElement)

// Returns the instance of [`HTMLVideoElement`](https://developer.mozilla.org/docs/Web/API/HTMLVideoElement)

// Returns the instance of [`SVGElement`](https://developer.mozilla.org/docs/Web/API/SVGElement)

// Returns the instance of `Renderer` that should be used to render the given

// Returns the internal ID for a layer

// Returns the layer with the given internal ID.

// Returns the maximum zoom level of the map (if set in the `maxZoom` option of the map or of any layers).

// Returns the maximum zoom level on which the given bounds fit to the map

// Returns the minimum zoom level of the map (if set in the `minZoom` option of the map or of any layers), or `0` by default.

// Returns the north latitude of the bounds

// Returns the north-east point of the bounds.

// Returns the north-west point of the bounds.

// Returns the point closest to `p` on the Polyline.

// Returns the popup bound to this layer.

// Returns the projected pixel coordinates of the top left point of

// Returns the projection's bounds scaled and transformed for the provided `zoom`.

// Returns the result of addition of the current and the given points.

// Returns the result of division of the current point by the given number.

// Returns the result of multiplication of the current point by the given number.

// Returns the result of subtraction of the given point from the current.

// Returns the reverse transformation of the given point, optionally divided

// Returns the scale factor to be applied to a map transition from zoom level

// Returns the scale used when transforming projected coordinates into

// Returns the size of the given bounds

// Returns the south latitude of the bounds

// Returns the south-east point of the bounds.

// Returns the south-west point of the bounds.

// Returns the tooltip bound to this layer.

// Returns the top-left point of the bounds (i.e. [`this.min`](#bounds-min)).

// Returns the top-right point of the bounds.

// Returns the west longitude of the bounds

// Returns the world's bounds in pixel coordinates for zoom level `zoom`.

// Returns the zoom level that the map would end up at, if it is at `fromZoom`

// Run an animation of a given element to a new position, optionally setting

// Runs the given function `fn` when the map gets initialized with

// SVG does not have the concept of zIndex so we resort to changing the DOM order of elements

// See [Icon documentation](#L.Icon) for details on how to customize the marker icon.

// See `Locate options` for more details.

// Set it if you want to override the default behavior of the popup closing when user clicks

// Set it to `false` if you don't want the map to do panning animation

// Set it to `false` if you want to override the default behavior of

// Set it to `true` if you want to prevent users from panning the popup

// Set it to false if you don't want the map to zoom beyond min/max zoom

// Sets a map view that contains the given geographical bounds with the

// Sets a map view that mostly contains the whole world with the maximum

// Sets the HTML content of the overlay while initializing. If a function is passed the source layer will be

// Sets the HTML content of the overlay. If a function is passed the source layer will be passed to the function.

// Sets the content of the popup bound to this layer.

// Sets the content of the tooltip bound to this layer.

// Sets the geographical point where the overlay will open.

// Sets the given path options to each layer of the group that has a `setStyle` method.

// Sets the lower limit for the available zoom levels (see the [minZoom](#map-minzoom) option).

// Sets the opacity of the overlay.

// Sets the position of a circle marker to a new location.

// Sets the position of the control.

// Sets the radius of a circle marker. Units are in pixels.

// Sets the radius of a circle. Units are in meters.

// Sets the upper limit for the available zoom levels (see the [maxZoom](#map-maxzoom) option).

// Sets the view of the map (geographical center and zoom) performing a smooth

// Sets the view of the map (geographical center and zoom) with the given

// Sets the view of the map with a smooth animation like [`flyTo`](#map-flyto),

// Sets the zoom of the map.

// Skip horizontal/depth wheel events

// Standard code name of the CRS passed into WMS services (e.g. `'EPSG:3857'`)

// Stops the animation (if currently running).

// Stops the currently running `panTo` or `flyTo` animation, if any.

// Stops watching location previously initiated by `map.locate({watch: true})`

// String to be shown in the attribution control, e.g. "© OpenStreetMap contributors". It describes the layer data and is often a legal obligation towards copyright holders and tile providers.

// Stroke color

// Stroke opacity

// Stroke width in pixels

// Subdomains of the tile service. Can be passed in the form of one string (where each letter is a subdomain name) or an array of strings.

// TODO Appropriate docs section?

// TODO refactor, move to CRS

// TODO: Check semantics - isn't the pixel origin the 0,0 coord relative to

// Text for the `alt` attribute of the icon image.

// Text for the `alt` attribute of the image (useful for accessibility).

// Text for the browser tooltip that appear on marker hover (no tooltip by default).

// The HTML text shown before the attributions. Pass `false` to disable.

// The [Coordinate Reference System](#crs) to use. Don't change this if you're not

// The default method for drawing vector layers on the map. `L.SVG`

// The explicit [zIndex](https://developer.mozilla.org/docs/Web/CSS/CSS_Positioning/Understanding_z_index) of the overlay layer.

// The explicit zIndex of the tile layer.

// The function receives both the `L.Layer` instances and their names, as in

// The function should return a `String` or `HTMLElement` to be used in the overlay.

// The inverse of `latLngToPoint`. Projects pixel coordinates on a given

// The inverse of `project`.

// The margin between the popup and the bottom right corner of the map

// The margin between the popup and the top left corner of the map

// The max number of pixels a user can shift his finger during touch

// The max number of pixels a user can shift the mouse pointer during a click

// The maximum zoom level up to which this layer will be displayed (inclusive).

// The minimum zoom level down to which this layer will be displayed (inclusive).

// The offset of the overlay position.

// The offset of the popup position.

// The opacity of the image overlay.

// The opacity of the marker.

// The position of the control (one of the map corners). Possible values are `'topleft'`,

// The rate with which the inertial movement slows down, in pixels/second².

// The scrollable container can be styled using the

// The text set on the 'zoom in' button.

// The text set on the 'zoom out' button.

// The title set on the 'zoom in' button.

// The title set on the 'zoom out' button.

// The verification can optionally be propagated, it will return `true` if parents have the listener attached to it.

// The z-index offset used for the `riseOnHover` feature.

// The zoom number used in tile URLs will be offset with this value.

// This may be needed if your map's rendering context has a strict default but your tile provider expects a valid referrer

// Tiles will not update more than once every `updateInterval` milliseconds when panning.

// Tooltip container opacity.

// Tries to locate the user using the Geolocation API, firing a [`locationfound`](#map-locationfound)

// URL to the overlay image to show in place of the overlay that failed to load.

// URL to the tile image to show in place of the tile that failed to load.

// Update the bounds that this ImageOverlay covers

// Updates the layer's URL template and redraws it (unless `noRedraw` is set to `true`).

// Updates the overlay content, layout and position. Useful for updating the overlay after something inside changed, e.g. image loaded.

// Used by the `attribution control`, returns the [attribution option](#gridlayer-attribution).

// Values smaller than `1` (e.g. `0.5`) allow for greater granularity.

// Version of the WMS service to use

// WMS image format (use `'image/png'` for layers with transparency).

// WMS server as extra parameters in each request URL. This can be useful for

// When `true`, a mouse event on this marker will trigger the same event on the map

// When `true`, a mouse event on this path will trigger the same event on the map

// When `true`, the map will pan whenever the marker is focused (via

// When panning the map, keep this many rows and columns of tiles before unloading them.

// When this option is set, the map restricts the view to the given

// Whether markers animate their zoom with the zoom animation, if disabled

// Whether the crossOrigin attribute will be added to the image.

// Whether the crossOrigin attribute will be added to the tiles.

// Whether the layer is wrapped around the antimeridian. If `true`, the

// Whether the map automatically handles browser window resize to update itself.

// Whether the map can be zoomed by touch-dragging with two fingers. If

// Whether the map can be zoomed by using the mouse wheel. If passed `'center'`,

// Whether the map can be zoomed in by double clicking on it and

// Whether the map can be zoomed to a rectangular area specified by

// Whether the map is draggable with mouse/touch or not.

// Whether the map zoom animation is enabled. By default it's enabled

// Whether the marker can be tabbed to with a keyboard and clicked by pressing enter.

// Whether the marker is draggable with mouse/touch or not.

// Whether the referrerPolicy attribute will be added to the tiles.

// Whether the tile fade animation is enabled. By default it's enabled

// Whether the video starts on mute when loaded.

// Whether the video starts playing automatically when loaded.

// Whether the video will loop back to the beginning when played.

// Whether the video will save aspect ratio after the projection.

// Whether to draw stroke along the path. Set it to `false` to disable borders on polygons or circles.

// Whether to fill the path with color. Set it to `false` to disable filling on polygons or circles.

// Whether to open the tooltip permanently or only on mouseover.

// Whether to pan the map when dragging this marker near its edge or not.

// Whether to show the imperial scale line (mi/ft).

// Whether to show the metric scale line (m/km).

// Whether to sort the layers. When `false`, layers will keep the order

// Width and height of tiles in the grid. Use a number if width and height are equal, or `L.point(width, height)` otherwise.

// With this option enabled, the map tracks when you pan to another "copy"

// Won't animate zoom if the zoom difference exceeds this value.

// Zooms the map while keeping a specified geographical point on the map

// Zooms the map while keeping a specified pixel on the map (relative to the top-left corner) stationary.

// [Useful for accessibility](https://leafletjs.com/examples/accessibility/#markers-must-be-labelled).

// [`getZoomScale`](#map-getZoomScale).

// [`keepBuffer`](#gridlayer-keepbuffer) option in desktop browsers.

// [`setMaxBounds`](#map-setmaxbounds) method.

// [`zoomIn()`](#map-zoomin), [`zoomOut()`](#map-zoomout), pressing `+`

// [non-standard vendor WMS parameters](https://docs.geoserver.org/stable/en/user/services/wms/vendor.html).

// [scaling matrix](https://en.wikipedia.org/wiki/Scaling_%28geometry%29#Matrix_representation)

// `'center'`, double-click zoom will zoom to the center of the

// `'topright'`, `'bottomleft'` or `'bottomright'`

// `0.5` by default).

// `256 * 2^zoom` for Mercator-based CRS.

// `Map pane` where the grid layer will be added.

// `Map pane` where the markers icon will be added.

// `Map pane` where the markers shadow will be added.

// `Map pane` where the overlay will be added.

// `Map pane` where the popup will be added.

// `Map pane` where the tooltip will be added.

// `Path`. It will ensure that the `renderer` options of the map and paths

// `Transformation`. The result is pixel coordinate relative to

// ```

// ```js

// `auto` will dynamically switch between `right` and `left` according to the tooltip

// `false` otherwise in order to display new tiles _during_ panning, since it is easy to pan outside the

// `fromZoom` to `toZoom`. Used internally to help with zoom animations.

// `leaflet-popup-scrolled` CSS class selector.

// `scale`. In linear algebra terms, multiply the point by the

// `sortFunction(layerA, layerB, nameA, nameB)`.

// `top`, `bottom`, `center`, `auto`.

// `true` by default on mobile browsers, in order to avoid too many requests and keep smooth navigation.

// `{setView: true}`.

// a specific ring as a LatLng array (that you can earlier access with [`getLatLngs`](#polyline-getlatlngs)).

// a view (center and zoom) and at least one layer, or immediately

// additional parameters. Has no effect if the layers contained do not

// adjust center for view to get inside bounds

// adjust offset for view to get inside bounds

// also can be set through CSS

// an instance of `HTMLElement`.

// and `layer.closePopup()`/`.closeTooltip()`.

// and aborts resetting the map view if map.locate was called with

// and optionally sets the map view to the user's location with respect to

// and then bounce back when pinch-zooming.

// animation options.

// are respected, and that the renderers do exist on the map.

// are when dragging the map around. The default value of `0.0` allows the

// argument of the [cubic bezier curve](https://cubic-bezier.com/#0,0,.5,1),

// arrows and `+`/`-` keys.

// as a child of the main map pane if not set.

// attach listener (without syntactic sugar now)

// axis wraps around a given range and how. Defaults to `[-180, 180]` in most

// better performance and smoother look, and less means more accurate representation.

// browsers.

// but takes a bounds parameter like [`fitBounds`](#map-fitbounds).

// by the given scale. Only accepts actual `L.Point` instances, not arrays.

// call it after you've changed the map size dynamically, also animating

// callback is called when the tile has been loaded.

// className: '',

// clip polyline by renderer bounds so that we have less to render for performance

// converts tile cache key to coordinates

// converts tile coordinates to its geographical bounds

// converts tile coordinates to key for the tile cache

// coordinates (sometimes useful in layer and overlay implementations).

// defined by `scale`.

// destructive transform (faster)

// detail: 1,

// detection accuracy (or to the world view if geolocation failed).

// devices. Enabled by default.

// distance between two geographical points using spherical law of cosines approximation

// dragging the mouse while pressing the shift key.

// duration in seconds (`0.25` by default) and easing linearity factor (3rd

// e.g. 0.1 would be 10% of map view in each direction

// e.g. pressing `tab` on the keyboard) to ensure the marker is

// each coordinate of `scale`.

// effect when the [map CRS](#map-crs) doesn't wrap around. Can be used

// enabled in all browsers that support CSS3 Transitions except Android.

// event took place.

// event with location data on success or a [`locationerror`](#map-locationerror) event on failure,

// factor of `scale`.

// faster (and vice versa).

// for it to be considered a valid click (as opposed to a mouse drag).

// for it to be considered a valid tap.

// from `maxNativeZoom` level and auto-scaled.

// from `minNativeZoom` level and auto-scaled.

// geographical CRSs. If `undefined`, the longitude axis does not wrap around.

// geographical bounds, bouncing the user back if the user tries to pan

// group.eachLayer(function (layer) {

// iconAnchor: (Point),

// if it's already initialized, optionally passing a function context.

// implement `methodName`.

// in all browsers that support CSS3 Transitions except Android.

// in combination with [`bounds`](#gridlayer-bounds) to prevent requesting

// in which they were added to the control.

// inside a popup if its content exceeds it.

// instead returns the minimum zoom level on which the map view fits into

// intersect if they have at least one point in common.

// is specified, it must be called when the tile has finished loading and drawing.

// it will zoom to the center of the view regardless of where the mouse was.

// its center is within the CRS's bounds.

// layer point of the current center

// level and everything is scaled by a factor of `scale`. Inverse of

// like markers and vector layers are still visible.

// map CRS. Don't change this if you're not sure what it means.

// map container where the event took place.

// map edge to start panning the map.

// map initialization methods

// map's CRS's `wrapLat` and `wrapLng` properties, if they are outside the

// maximum zoom level possible.

// mean a change of one full zoom level. Smaller values will make wheel-zooming

// means the zoom level will not be snapped after `fitBounds` or a pinch-zoom.

// methods below are called by vector layers implementations

// modern browsers ([Chrome 50 and newer](https://sites.google.com/a/chromium.org/dev/Home/chromium-security/deprecating-powerful-features-on-insecure-origins))

// necessary event listeners. If a `Function` is passed it will receive

// object — the first argument of the listener function will contain its

// of the map's CRS, then scales it according to `zoom` and the CRS's

// of the world and seamlessly jumps to the original one so that all overlays

// off of the screen while it is open.

// offset of the specified place to the current center in pixels

// offset.left/top values are in page scale (like clientX/Y),

// on the map. Defaults to the map's [`closePopupOnClick`](#map-closepopuponclick) option.

// or `-` on the keyboard, or using the [zoom controls](#control-zoom).

// or `L.Canvas` by default depending on browser support.

// outside the view. To set the restriction dynamically, use

// overlap if their intersection is an area.

// overlaps the CRS's bounds.

// padding options to fit the display to more restricted bounds.

// pan by default.

// pan by default. If `options.pan` is `false`, panning will not occur.

// pan-zoom animation.

// passed `'center'`, it will zoom to the center of the view regardless of

// passed to the function. The function should return a `String` or `HTMLElement` to be used in the overlay.

// pixel coordinate relative to the [origin pixel](#map-getpixelorigin).

// pixel coordinates for a particular zoom. For example, it returns

// popupAnchor: (Point),

// position on the map.

// prepare bound overlay to open: update latlng pos / content source (for FeatureGroup)

// private methods for getting map state

// private methods that modify map state

// properties. The event can optionally be propagated to event parents.

// px/s

// px/s^2

// recursively convert latlngs input into actual LatLng instances; calculate bounds along the way

// recursively turns latlngs into a set of rings with projected coordinates

// relative to the [origin pixel](#map-getpixelorigin).

// relative to the map container.

// returns offset needed for pxBounds to get inside maxBounds at a specified zoom

// returns the corresponding geographical coordinate (for the current zoom level).

// returns the corresponding pixel coordinate relative to the map container.

// returns the index (number) or false

// right after a [`fitBounds()`](#map-fitbounds) or a pinch-zoom.

// see https://rosettacode.org/wiki/Haversine_formula

// simplify each clipped part of the polyline for performance

// since there can be negative offsets.

// slow down map dragging outside bounds, and `1.0` makes the bounds fully

// so we emulate that by calculating what's under the mouse on mousemove/click manually

// solid, preventing the user from dragging outside the bounds.

// stationary (e.g. used internally for scroll zoom and double-click zoom).

// stops loading all tiles in the background layer

// styled according to the options.

// sure what it means.

// that it doesn't happen often even if the method is called many

// that its center is within the CRS's bounds.

// that will be used for sorting the layers, when `sortLayers` is `true`.

// the CRS origin.

// the ESC key for closing of the popup.

// the International Union of Geodesy and Geophysics,

// the [origin pixel](#map-getpixelorigin) where the event took place.

// the corresponding geographical coordinate (for the current zoom level).

// the given bounds in its entirety.

// the highest of their `maxZoom` options will be used instead.

// the layer as the first argument and should return a `String` or `HTMLElement`.

// the lowest of their `minZoom` options will be used instead.

// the map builds momentum while dragging and continues moving in

// the map layer (useful in custom layer and overlay implementations).

// the map pane? "left point of the map layer" can be confusing, specially

// the map will not be panned.

// the map's CRS. By default this measures distance in meters.

// the noRedraw parameter is set to false.

// the panes as values.

// the polyline in case of a multi-polyline, but can be overridden by passing

// the popup closing when another popup is opened.

// the same direction for some time. Feels especially nice on touch

// the tiles on all zoom levels higher than `maxNativeZoom` will be loaded

// the tiles on all zoom levels lower than `minNativeZoom` will be loaded

// the wrong place after doing a large `panBy`.

// then returns it. The pane is created as a child of `container`, or

// they will disappear for the length of the animation. By default it's

// this CRS (e.g. meters for EPSG:3857, for passing it to WMS services).

// tiles outside the CRS limits.

// times in a row.

// to fit the opened popup.

// to return an `<img>` HTML element with the appropriate image URL given `coords`. The `done`

// used by this overlay.

// user can't zoom via wheel more often than once per 40 ms.

// user to drag outside the bounds at normal speed, higher values will

// value is between -180 and +180 degrees, and the majority of the bounds

// value is between -180 and +180 degrees.

// value should not be changed unless a web browser positions layers in

// view after autopanning was performed.

// view in its entirety. If `inside` (optional) is set to `true`, the method

// visible within the map's bounds

// where the touch events (fingers) were. Enabled for touch-capable web

// whereas clientLeft/Top (border width) values are the original values (before CSS scale applies).

// wrapLat: [min, max],

// wrapLng: [min, max],

// zoom into geographical coordinates.

// zoom level possible.

// zoomed out by double clicking while holding shift. If passed

// });
